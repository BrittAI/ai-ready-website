---
description: This is the new design system for the Firecrawl web app.
globs:
alwaysApply: true
---

# Firecrawl Design System Documentation

This document provides a comprehensive overview of the new design system structure implemented in the Firecrawl web application. The design system is built on top of modern web technologies including Tailwind CSS, shadcn/ui, and custom component libraries.

## Table of Contents

1. [Overview](#overview)
2. [Color System](#color-system)
3. [Tailwind Configuration](#tailwind-configuration)
4. [Component Architecture](#component-architecture)
5. [Brand Assets](#brand-assets)
6. [Development Guidelines](#development-guidelines)

## Overview

The Firecrawl design system is organized around a modular component architecture located in the `components-new/` directory. The system integrates multiple UI libraries and provides a consistent visual language across the application.

### Key Technologies

- **Tailwind CSS**: Utility-first CSS framework with custom configuration
- **shadcn/ui**: High-quality React components built on Radix UI
- **Custom Components**: Application-specific shared components

### Directory Structure

```
components-new/
├── ui/                    # Core UI components
│   ├── shadcn/           # shadcn/ui components
│   ├── magic/            # Magic UI animated components
│   ├── tremor/           # Tremor data visualization components
│   └── motion/           # Motion and animation utilities
├── shared/               # Shared application components
│   ├── icons/            # Icon components and brand assets
│   ├── buttons/          # Custom button components
│   ├── cards/            # Card components
│   ├── effects/          # Visual effects and animations
│   ├── layout/           # Layout utilities
│   └── ui/               # Shared UI utilities
├── app/                  # Application-specific components
│   ├── brand/            # Brand-related components
│   ├── pricing/          # Pricing page components
│   └── (home)/           # Home page components
└── providers/            # Context providers and theme management
```

## Color System

The design system uses a comprehensive color palette defined in `colors.json` and `styles/colors.json`. The color system is designed to provide consistent theming across light and dark modes.

### Color Categories

#### Heat Colors
The primary brand color with various opacity levels:
- `heat-4` to `heat-100`: Orange/red brand color (#fa5d19) with opacity variants from 4% to 100%

#### Accent Colors
Semantic colors for different UI states and contexts:
- `accent-black`: Dark neutral (#262626)
- `accent-white`: Pure white (#ffffff)
- `accent-amethyst`: Purple accent (#9061ff)
- `accent-bluetron`: Blue accent (#2a6dfb)
- `accent-crimson`: Red accent (#eb3424)
- `accent-forest`: Green accent (#42c366)
- `accent-honey`: Yellow accent (#ecb730)

#### Alpha Variants
Transparent overlays for layering and depth:
- `black-alpha-1` to `black-alpha-88`: Black with opacity from 1% to 88%
- `white-alpha-56` and `white-alpha-72`: White with 56% and 72% opacity

#### UI Colors
Specific colors for interface elements:
- `border-faint`, `border-muted`, `border-loud`: Border color variants
- `illustrations-faint`, `illustrations-muted`, `illustrations-default`: Illustration colors
- `background-lighter`, `background-base`: Background color variants

### Color Usage

Colors are integrated into Tailwind CSS through CSS custom properties:

```typescript
const colors = Object.keys(colorsJson).reduce(
  (acc, key) => {
    acc[key] = `var(--${key})`;
    return acc;
  },
  {} as Record<string, string>
);
```

This allows for dynamic theming and consistent color usage across components:

```jsx
<div className="bg-heat-100 text-accent-white">
  Primary brand styling
</div>

<div className="border border-border-muted bg-background-base">
  Subtle interface element
</div>
```

## Tailwind Configuration

The Tailwind configuration (`tailwind.config.ts`) extends the default theme with custom typography, spacing, and utility classes specifically designed for the Firecrawl design system.

### Typography Scale

The design system includes a comprehensive typography scale with semantic naming:

#### Titles
- `title-h1`: 60px, line-height 64px, letter-spacing -0.3px
- `title-h2`: 52px, line-height 56px, letter-spacing -0.52px
- `title-h3`: 40px, line-height 44px, letter-spacing -0.4px
- `title-h4`: 32px, line-height 36px, letter-spacing -0.32px
- `title-h5`: 24px, line-height 32px, letter-spacing -0.24px

#### Body Text
- `body-x-large`: 20px, line-height 28px, letter-spacing -0.1px
- `body-large`: 16px, line-height 24px
- `body-medium`: 14px, line-height 20px, letter-spacing 0.14px
- `body-small`: 13px, line-height 20px
- `body-input`: 15px, line-height 24px

#### Labels
- `label-x-large`: 20px, line-height 28px, font-weight 450
- `label-large`: 16px, line-height 24px, font-weight 450
- `label-medium`: 14px, line-height 20px, font-weight 450
- `label-small`: 13px, line-height 20px, font-weight 450
- `label-x-small`: 12px, line-height 20px, font-weight 450

#### Monospace
- `mono-medium`: 14px, line-height 22px
- `mono-small`: 13px, line-height 20px, font-weight 500
- `mono-x-small`: 12px, line-height 16px

### Font Families

- **Sans**: SuisseIntl (primary), system fallbacks
- **Mono**: Geist Mono, system fallbacks
- **ASCII**: Roboto Mono, system fallbacks

### Custom Utilities

The configuration includes several custom utility classes:

#### Border Utilities
- `.inside-border`: Absolute positioned border overlay
- `.inside-border-x`: Horizontal border overlay
- `.inside-border-y`: Vertical border overlay
- `.mask-border`: CSS mask for border effects

#### Positioning Utilities
- `.center-x`: Horizontal centering
- `.center-y`: Vertical centering
- `.center`: Full centering
- `.flex-center`: Flexbox centering

#### Layout Utilities
- `.overlay`: Full overlay positioning
- `.text-gradient`: Text gradient effects

#### Custom Sizing Utilities
- `cw-{size}`: Centered width positioning
- `ch-{size}`: Centered height positioning
- `cs-{size}`: Centered square sizing
- `cmw-{maxWidth},{padding}`: Centered max-width with padding
- `mw-{maxWidth},{padding}`: Max-width with padding

### Responsive Breakpoints

```typescript
screens: {
  xs: { min: "390px" },
  "xs-max": { max: "389px" },
  sm: { min: "576px" },
  "sm-max": { max: "575px" },
  md: { min: "768px" },
  "md-max": { max: "767px" },
  lg: { min: "996px" },
  "lg-max": { max: "995px" },
  xl: { min: "1200px" },
  "xl-max": { max: "1199px" }
}
```

## Component Architecture

### UI Components (`components-new/ui/`)

The UI layer consists of three main component libraries:

#### shadcn/ui Components
High-quality, accessible React components:
- Form controls: `Button`, `Input`, `Select`, `Checkbox`, `Switch`
- Layout: `Card`, `Sheet`, `Dialog`, `Tabs`, `Accordion`
- Navigation: `NavigationMenu`, `DropdownMenu`, `ContextMenu`
- Feedback: `Toast`, `Alert`, `Progress`, `Badge`
- Data: `Table`, `DataTable`, `Calendar`

#### Magic UI Components
Animated and interactive components:
- `animated-shiny-text`: Shimmer text effects
- `animated-list`: List animations
- `dot-pattern`: Background patterns
- `dock`: macOS-style dock component
- `ripple`: Ripple effects
- `gradual-spacing`: Text spacing animations

#### Tremor Components
Data visualization and dashboard components:
- Charts: `LineChart`, `BarChart`, `AreaChart`
- Controls: `Button`, `Badge`, `Dropdown`
- Layout: `Card`, `Calendar`, `DatePicker`
- Progress: `ProgressBar`

### Shared Components (`components-new/shared/`)

#### Icons (`shared/icons/`)
Brand and utility icons with organized exports:

```typescript
// Brand Icons
export { default as SymbolWhite } from './symbol-white';
export { default as SymbolColored } from './symbol-colored';
export { default as WordmarkWhite } from './wordmark-white';
export { default as WordmarkColored } from './wordmark-colored';

// Utility Icons
export { default as AnimatedLogo } from './animated-logo';
export { default as Check } from './check';
export { default as GitHub } from './github';
```

#### Buttons (`shared/buttons/`)
Custom button components with brand styling:

```typescript
export { SlateButton } from './slate-button';
export { HeatButton } from './heat-button';
export { FireActionLink } from './fire-action-link';
```

#### Layout Components
- `curvy-rect`: Curved rectangle shapes
- `animated-height`: Height animations
- `animated-width`: Width animations
- `unified-blur-overlay`: Backdrop blur effects

#### Effects and Animations
- `flame/`: Fire animation effects
- `animated-beam`: Connecting beam animations
- `data-sources-beam`: Data flow visualizations

### Application Components (`components-new/app/`)

#### Brand Components (`app/brand/`)
Components specific to brand presentation:

- `brand-hero.tsx`: Brand page hero section
- `brand-assets-copy.tsx`: Asset copying functionality
- `brand-assets-download.tsx`: Asset download functionality
- `brand-group.tsx`: Brand asset grouping
- `firecrawl-logo.tsx`: Logo component variants
- `firecrawl-wordmark.tsx`: Wordmark components

Example brand hero component:

```tsx
export default function BrandHero() {
  return (
    <section className='max-w-[1112px] mx-auto -mt-1'>
      <SectionHead
        action={(
          <a className="contents" href="/brand/brand-assets.zip" download>
            <Button className='mx-auto' size='large' variant='primary'>
              Download brand assets
            </Button>
          </a>
        )}
        description="Welcome to the Firecrawl brand hub..."
        title={<><span className="text-heat-100">Firecrawl </span> Brand Assets</>}
        titleClassName='text-title-h3'
      >
        <DeveloperFlame />
      </SectionHead>
    </section>
  );
}
```

## Brand Assets

### Asset Organization (`public/brand/`)

The brand assets are organized in the `public/brand/` directory with comprehensive logo and marketing materials:

#### Logo Variants
- `firecrawl-logo.svg/png`: Primary logo
- `firecrawl-light-logo.svg/png`: Light theme variant
- `firecrawl-wordmark.svg/png`: Text-only wordmark
- `firecrawl-light-wordmark.svg/png`: Light wordmark variant
- `firecrawl-icon.png`: App icon
- `firecrawl-app-icon.png`: Application icon variant

#### Special Assets
- `firecrawl-logo-transparent.png`: Transparent background logo
- `firecrawl-logo-with-fire.png`: Logo with fire element
- `logo_fire.png`: Fire element standalone

#### Marketing Materials
- `scrape-data-from-any-site--firecrawl.jpg`
- `turn-websites-into-llm-ready-data--firecrawl.jpg`
- `we-handle-all-the-hard-stuff--firecrawl.jpg`
- `trusted-by-devs-at-top-companies--firecrawl.jpg`

#### Asset Distribution
- `brand-assets.zip`: Complete brand asset package for download

### Brand Usage Guidelines

#### Logo Usage
- Use `firecrawl-logo.svg` for primary brand representation
- Use `firecrawl-light-logo.svg` on dark backgrounds
- Use `firecrawl-wordmark.svg` when space is constrained
- Maintain proper spacing and sizing ratios

#### Color Usage
- Primary brand color: `heat-100` (#fa5d19)
- Use accent colors sparingly for highlights and CTAs
- Maintain sufficient contrast ratios for accessibility

## Development Guidelines

### Component Development

#### File Organization
- Place reusable components in `shared/`
- Place page-specific components in `app/`
- Use index files for clean imports
- Group related components in subdirectories

#### Naming Conventions
- Use PascalCase for component files and exports
- Use kebab-case for directories
- Use descriptive, semantic names

#### Styling Guidelines
- Use Tailwind utility classes for styling
- Leverage design system colors and typography scales
- Use custom utilities for common patterns
- Avoid inline styles and CSS modules

#### Component Structure
```tsx
// Import statements
import { ComponentProps } from 'react';
import { Button } from '@/components/ui/shadcn/button';

// Type definitions
interface MyComponentProps {
  title: string;
  variant?: 'primary' | 'secondary';
}

// Component implementation
export default function MyComponent({ title, variant = 'primary' }: MyComponentProps) {
  return (
    <div className="bg-background-base border border-border-muted rounded-8">
      <h2 className="text-title-h4 text-heat-100">{title}</h2>
      <Button variant={variant}>Action</Button>
    </div>
  );
}
```

### Best Practices

#### Accessibility
- Use semantic HTML elements
- Provide proper ARIA labels and roles
- Maintain keyboard navigation support
- Ensure sufficient color contrast

#### Performance
- Use dynamic imports for large components
- Optimize images and assets
- Leverage React Server Components when possible
- Minimize client-side JavaScript

#### Consistency
- Follow established patterns from existing components
- Use design system tokens consistently
- Maintain consistent spacing and typography
- Follow the established file and folder structure

### Integration with Existing Systems

The design system is designed to work alongside the existing component structure while providing a migration path to the new system. Components in `components-new/` should be preferred for new development, while existing components can be gradually migrated.

#### Import Patterns
```tsx
// Preferred: Use components-new
import { Button } from '@/components/ui/shadcn/button';

// Legacy: Existing components (migrate when possible)
import { OldButton } from '@/components/ui/button';
```

This design system provides a solid foundation for building consistent, accessible, and maintainable user interfaces across the Firecrawl application while supporting both current needs and future growth.


### Sizing differences


#### Sizing System Changes

The design system has transitioned from rem-based sizing to pixel-based sizing, which results in significantly different scale values compared to traditional Tailwind CSS defaults.

**Key Changes:**
- **Previous system**: Used rem units (e.g., `w-4` = 1rem = 16px)
- **Current system**: Uses pixel units directly (e.g., `w-4` = 4px)
- **Scale impact**: Values are roughly 6x smaller than traditional Tailwind defaults

**Practical Examples:**
